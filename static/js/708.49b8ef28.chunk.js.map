{"version":3,"file":"static/js/708.49b8ef28.chunk.js","mappings":"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","sources":["components/ContactForm.jsx","components/Filter.jsx","components/ContactList.jsx","pages/ContactsUser.jsx"],"sourcesContent":["import style from './ContactForm.module.css';\nimport * as yup from 'yup';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nlet schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2)\n    .matches(\n      /^[aA-zZ\\s]+$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup.number().min(7).required(),\n});\n\nexport const ContactForm = ({\n  handleSubmit,\n\n  initialValues,\n}) => {\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Form className={style.form} autoComplete=\"off\">\n        <label>\n          <h3>Name</h3>\n          <Field\n            className={style.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n          <ErrorMessage component=\"div\" className={style.error} name=\"name\" />\n        </label>\n        <label>\n          <h3>Number</h3>\n          <Field\n            className={style.input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n          <ErrorMessage component=\"div\" className={style.error} name=\"number\" />\n        </label>\n        <button className={style.button} type=\"submit\">\n          Add contact\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n","import style from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\n\nexport const Filter = ({ filter, changeFilter }) => {\n  return (\n    <>\n      <h3>Find contacts by name</h3>\n      <input\n        className={style.input}\n        id={nanoid()}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        required\n        value={filter}\n        onChange={e => changeFilter(e.target.value)}\n      />\n    </>\n  );\n};\n","import { nanoid } from 'nanoid';\nimport style from './ContactForm.module.css';\n\nimport { useDeleteContactMutation, useGetContactsQuery } from '../redux/store';\n\nexport const ContactList = ({ visibleContacts }) => {\n  const [deleteContact] = useDeleteContactMutation();\n\n  const { data } = useGetContactsQuery();\n\n  return (\n    <ul>\n      {data && (\n        <>\n          {visibleContacts.map(contact => {\n            return (\n              <li className={style.addContact} key={nanoid()}>\n                {contact.name}: {contact.number}\n                <button\n                  className={style.btn}\n                  onClick={() => deleteContact(contact.id)}\n                  type=\"button\"\n                >\n                  Delete\n                </button>\n              </li>\n            );\n          })}\n        </>\n      )}\n    </ul>\n  );\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport style from '../components/ContactForm.module.css';\nimport { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\nimport { ContactList } from 'components/ContactList';\n\nimport { useGetContactsQuery, useCreateContactMutation } from '../redux/store';\n\nconst ContactsUser = () => {\n  const [name] = useState('');\n  const [number] = useState('');\n  const [filter, setFilter] = useState('');\n\n  const { data: items } = useGetContactsQuery();\n\n  const [createContact] = useCreateContactMutation();\n\n  const handleSubmit = async (evt, actions) => {\n    if (await items.find(el => el.name === evt.name)) {\n      alert(`${evt.name} is already in contacs`);\n      actions.resetForm();\n\n      return;\n    }\n\n    const contactInput = {\n      name: evt.name,\n      number: evt.number,\n    };\n\n    await createContact(contactInput);\n\n    actions.resetForm();\n  };\n\n  const changeFilter = e => {\n    setFilter(e);\n  };\n\n  const getVisibleContacts = () => {\n    let filteredArr;\n    if (items) {\n      filteredArr = items.filter(el =>\n        el.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    } else {\n      filteredArr = items;\n    }\n\n    return filteredArr;\n  };\n\n  const visibleContacts = getVisibleContacts();\n  return (\n    <>\n      <div className={style.allForm}>\n        <h1>Phonebook</h1>\n        <ContactForm\n          initialValues={{ items, name, number, filter }}\n          handleSubmit={handleSubmit}\n        />\n        <h2>Contacts</h2>\n        <Filter contact={items} filter={filter} changeFilter={changeFilter} />\n\n        {items && <ContactList visibleContacts={visibleContacts} />}\n      </div>\n    </>\n  );\n};\n\nContactForm.propTypes = {\n  initialValues: PropTypes.object,\n  handleSubmit: PropTypes.func,\n};\n\nFilter.propTypes = {\n  contact: PropTypes.array,\n  filterState: PropTypes.string,\n  handleFilter: PropTypes.func,\n};\n\nContactList.propTypes = {\n  // visibleContacts: PropTypes.array,\n  deleteContact: PropTypes.func,\n};\n\nexport default ContactsUser;\n"],"names":["schema","yup","shape","name","min","matches","required","number","ContactForm","handleSubmit","initialValues","onSubmit","validationSchema","className","style","autoComplete","type","pattern","title","component","Filter","filter","changeFilter","id","nanoid","value","onChange","e","target","ContactList","visibleContacts","useDeleteContactMutation","deleteContact","data","useGetContactsQuery","map","contact","onClick","propTypes","PropTypes","filterState","handleFilter","useState","setFilter","items","useCreateContactMutation","createContact","evt","actions","find","el","alert","resetForm","contactInput","toLowerCase","includes"],"sourceRoot":""}